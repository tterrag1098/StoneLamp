--- ../src-base/minecraft/net/minecraft/util/WeightedRandomChestContent.java
+++ ../src-work/minecraft/net/minecraft/util/WeightedRandomChestContent.java
@@ -5,6 +5,7 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntityDispenser;
+import net.minecraftforge.common.ChestGenHooks;
 
 public class WeightedRandomChestContent extends WeightedRandom.Item
 {
@@ -38,23 +39,12 @@
         for (int j = 0; j < par3; ++j)
         {
             WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(par0Random, par1ArrayOfWeightedRandomChestContent);
-            int k = weightedrandomchestcontent.theMinimumChanceToGenerateItem + par0Random.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
+            ItemStack[] stacks = weightedrandomchestcontent.generateChestContent(par0Random, par2IInventory);
 
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k)
+            for (ItemStack item : stacks)
             {
-                ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
-                itemstack.stackSize = k;
-                par2IInventory.setInventorySlotContents(par0Random.nextInt(par2IInventory.getSizeInventory()), itemstack);
+                par2IInventory.setInventorySlotContents(par0Random.nextInt(par2IInventory.getSizeInventory()), item);
             }
-            else
-            {
-                for (int l = 0; l < k; ++l)
-                {
-                    ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
-                    itemstack1.stackSize = 1;
-                    par2IInventory.setInventorySlotContents(par0Random.nextInt(par2IInventory.getSizeInventory()), itemstack1);
-                }
-            }
         }
     }
 
@@ -64,22 +54,11 @@
         {
             WeightedRandomChestContent weightedrandomchestcontent = (WeightedRandomChestContent)WeightedRandom.getRandomItem(p_150706_0_, p_150706_1_);
             int k = weightedrandomchestcontent.theMinimumChanceToGenerateItem + p_150706_0_.nextInt(weightedrandomchestcontent.theMaximumChanceToGenerateItem - weightedrandomchestcontent.theMinimumChanceToGenerateItem + 1);
-
-            if (weightedrandomchestcontent.theItemId.getMaxStackSize() >= k)
+            ItemStack[] stacks = weightedrandomchestcontent.generateChestContent(p_150706_0_, p_150706_2_);
+            for (ItemStack item : stacks)
             {
-                ItemStack itemstack = weightedrandomchestcontent.theItemId.copy();
-                itemstack.stackSize = k;
-                p_150706_2_.setInventorySlotContents(p_150706_0_.nextInt(p_150706_2_.getSizeInventory()), itemstack);
+                p_150706_2_.setInventorySlotContents(p_150706_0_.nextInt(p_150706_2_.getSizeInventory()), item);
             }
-            else
-            {
-                for (int l = 0; l < k; ++l)
-                {
-                    ItemStack itemstack1 = weightedrandomchestcontent.theItemId.copy();
-                    itemstack1.stackSize = 1;
-                    p_150706_2_.setInventorySlotContents(p_150706_0_.nextInt(p_150706_2_.getSizeInventory()), itemstack1);
-                }
-            }
         }
     }
 
@@ -104,4 +83,17 @@
 
         return aweightedrandomchestcontent1;
     }
+
+    // -- Forge hooks
+    /**
+     * Allow a mod to submit a custom implementation that can delegate item stack generation beyond simple stack lookup
+     *
+     * @param random The current random for generation
+     * @param newInventory The inventory being generated (do not populate it, but you can refer to it)
+     * @return An array of {@link ItemStack} to put into the chest
+     */
+    protected ItemStack[] generateChestContent(Random random, IInventory newInventory)
+    {
+        return ChestGenHooks.generateStacks(random, theItemId, theMinimumChanceToGenerateItem, theMaximumChanceToGenerateItem);
+    }
 }
