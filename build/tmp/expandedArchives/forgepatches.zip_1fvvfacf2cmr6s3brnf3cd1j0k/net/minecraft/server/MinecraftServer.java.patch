--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -71,6 +72,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
+
 public abstract class MinecraftServer implements ICommandSender, Runnable, IPlayerUsage
 {
     private static final Logger logger = LogManager.getLogger();
@@ -93,7 +98,7 @@
     // JAVADOC FIELD $$ field_71319_s
     private int serverPort = -1;
     // JAVADOC FIELD $$ field_71305_c
-    public WorldServer[] worldServers;
+    public WorldServer[] worldServers = new WorldServer[0];
     // JAVADOC FIELD $$ field_71318_t
     private ServerConfigurationManager serverConfigManager;
     // JAVADOC FIELD $$ field_71317_u
@@ -123,7 +128,8 @@
     private int field_143008_E = 0;
     public final long[] tickTimeArray = new long[100];
     // JAVADOC FIELD $$ field_71312_k
-    public long[][] timeOfLastDimensionTick;
+    //public long[][] timeOfLastDimensionTick;
+    public Hashtable<Integer, long[]> worldTickTimes = new Hashtable<Integer, long[]>();
     private KeyPair serverKeyPair;
     // JAVADOC FIELD $$ field_71293_J
     private String serverOwner;
@@ -215,8 +221,6 @@
     {
         this.convertMapIfNeeded(par1Str);
         this.setUserMessage("menu.loadingLevel");
-        this.worldServers = new WorldServer[3];
-        this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
         ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(par1Str, true);
         WorldInfo worldinfo = isavehandler.loadWorldInfo();
         WorldSettings worldsettings;
@@ -236,46 +240,21 @@
             worldsettings.enableBonusChest();
         }
 
-        for (int j = 0; j < this.worldServers.length; ++j)
+        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, isavehandler, par2Str, 0, theProfiler) : new WorldServer(this, isavehandler, par2Str, 0, worldsettings, theProfiler));
+        for (int dim : DimensionManager.getStaticDimensionIDs())
         {
-            byte b0 = 0;
+            WorldServer world = (dim == 0 ? overWorld : new WorldServerMulti(this, isavehandler, par2Str, dim, worldsettings, overWorld, theProfiler));
+            world.addWorldAccess(new WorldManager(this, world));
 
-            if (j == 1)
-            {
-                b0 = -1;
-            }
-
-            if (j == 2)
-            {
-                b0 = 1;
-            }
-
-            if (j == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.worldServers[j] = new DemoWorldServer(this, isavehandler, par2Str, b0, this.theProfiler);
-                }
-                else
-                {
-                    this.worldServers[j] = new WorldServer(this, isavehandler, par2Str, b0, worldsettings, this.theProfiler);
-                }
-            }
-            else
-            {
-                this.worldServers[j] = new WorldServerMulti(this, isavehandler, par2Str, b0, worldsettings, this.worldServers[0], this.theProfiler);
-            }
-
-            this.worldServers[j].addWorldAccess(new WorldManager(this, this.worldServers[j]));
-
             if (!this.isSinglePlayer())
             {
-                this.worldServers[j].getWorldInfo().setGameType(this.getGameType());
+                world.getWorldInfo().setGameType(this.getGameType());
             }
 
-            this.serverConfigManager.setPlayerManager(this.worldServers);
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
         }
 
+        this.serverConfigManager.setPlayerManager(new WorldServer[]{ overWorld });
         this.func_147139_a(this.func_147135_j());
         this.initialWorldChunkLoad();
     }
@@ -346,6 +325,7 @@
         if (!this.worldIsBeingDeleted)
         {
             WorldServer[] aworldserver = this.worldServers;
+            if (aworldserver == null) return; //Forge: Just in case, NPE protection as it has been encountered.
             int i = aworldserver.length;
 
             for (int j = 0; j < i; ++j)
@@ -397,9 +377,16 @@
             for (int i = 0; i < this.worldServers.length; ++i)
             {
                 WorldServer worldserver = this.worldServers[i];
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(worldserver));
                 worldserver.flush();
             }
 
+            WorldServer[] tmp = worldServers;
+            for (WorldServer world : tmp)
+            {
+                DimensionManager.setWorld(world.provider.dimensionId, null);
+            }
+
             if (this.usageSnooper.isSnooperRunning())
             {
                 this.usageSnooper.stopSnooper();
@@ -629,13 +616,15 @@
         this.theProfiler.startSection("levels");
         int i;
 
-        for (i = 0; i < this.worldServers.length; ++i)
+        Integer[] ids = DimensionManager.getIDs(this.tickCounter % 200 == 0);
+        for (int x = 0; x < ids.length; x++)
         {
+            int id = ids[x];
             long j = System.nanoTime();
 
-            if (i == 0 || this.getAllowNether())
+            if (id == 0 || this.getAllowNether())
             {
-                WorldServer worldserver = this.worldServers[i];
+                WorldServer worldserver = DimensionManager.getWorld(id);
                 this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
                 this.theProfiler.startSection("pools");
                 worldserver.getWorldVec3Pool().clear();
@@ -682,9 +671,11 @@
                 this.theProfiler.endSection();
             }
 
-            this.timeOfLastDimensionTick[i][this.tickCounter % 100] = System.nanoTime() - j;
+            worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - j;
         }
 
+        this.theProfiler.endStartSection("dim_unloading");
+        DimensionManager.unloadWorlds(worldTickTimes);
         this.theProfiler.endStartSection("connection");
         this.func_147137_ag().networkTick();
         this.theProfiler.endStartSection("players");
@@ -731,7 +722,13 @@
     // JAVADOC METHOD $$ func_71218_a
     public WorldServer worldServerForDimension(int par1)
     {
-        return par1 == -1 ? this.worldServers[1] : (par1 == 1 ? this.worldServers[2] : this.worldServers[0]);
+        WorldServer ret = DimensionManager.getWorld(par1);
+        if (ret == null)
+        {
+            DimensionManager.initDimension(par1);
+            ret = DimensionManager.getWorld(par1);
+        }
+        return ret;
     }
 
     // JAVADOC METHOD $$ func_71249_w
@@ -1007,6 +1004,7 @@
 
             if (worldserver != null)
             {
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(worldserver));
                 worldserver.flush();
             }
         }
@@ -1496,7 +1494,6 @@
         this.field_147141_M = p_155759_1_;
     }
 
-    @SideOnly(Side.SERVER)
     public boolean isServerStopped()
     {
         return this.serverStopped;
