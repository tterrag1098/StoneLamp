--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderHell.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderHell.java
@@ -21,6 +21,14 @@
 import net.minecraft.world.gen.feature.WorldGenMinable;
 import net.minecraft.world.gen.structure.MapGenNetherBridge;
 
+import static net.minecraftforge.event.terraingen.DecorateBiomeEvent.Decorate.EventType.*;
+import static net.minecraftforge.event.terraingen.InitMapGenEvent.EventType.*;
+import static net.minecraftforge.event.terraingen.PopulateChunkEvent.Populate.EventType.*;
+import static net.minecraftforge.event.terraingen.OreGenEvent.GenerateMinable.EventType.*;
+import net.minecraftforge.common.*;
+import cpw.mods.fml.common.eventhandler.Event.*;
+import net.minecraftforge.event.terraingen.*;
+
 public class ChunkProviderHell implements IChunkProvider
 {
     private Random hellRNG;
@@ -51,6 +59,11 @@
     double[] noiseData5;
     private static final String __OBFID = "CL_00000392";
 
+    {
+        genNetherBridge = (MapGenNetherBridge) TerrainGen.getModdedMapGen(genNetherBridge, NETHER_BRIDGE);
+        netherCaveGenerator = TerrainGen.getModdedMapGen(netherCaveGenerator, NETHER_CAVE);
+    }
+
     public ChunkProviderHell(World par1World, long par2)
     {
         this.worldObj = par1World;
@@ -62,6 +75,16 @@
         this.netherrackExculsivityNoiseGen = new NoiseGeneratorOctaves(this.hellRNG, 4);
         this.netherNoiseGen6 = new NoiseGeneratorOctaves(this.hellRNG, 10);
         this.netherNoiseGen7 = new NoiseGeneratorOctaves(this.hellRNG, 16);
+
+        NoiseGenerator[] noiseGens = {netherNoiseGen1, netherNoiseGen2, netherNoiseGen3, slowsandGravelNoiseGen, netherrackExculsivityNoiseGen, netherNoiseGen6, netherNoiseGen7};
+        noiseGens = TerrainGen.getModdedNoiseGenerators(par1World, this.hellRNG, noiseGens);
+        this.netherNoiseGen1 = (NoiseGeneratorOctaves)noiseGens[0];
+        this.netherNoiseGen2 = (NoiseGeneratorOctaves)noiseGens[1];
+        this.netherNoiseGen3 = (NoiseGeneratorOctaves)noiseGens[2];
+        this.slowsandGravelNoiseGen = (NoiseGeneratorOctaves)noiseGens[3];
+        this.netherrackExculsivityNoiseGen = (NoiseGeneratorOctaves)noiseGens[4];
+        this.netherNoiseGen6 = (NoiseGeneratorOctaves)noiseGens[5];
+        this.netherNoiseGen7 = (NoiseGeneratorOctaves)noiseGens[6];
     }
 
     public void func_147419_a(int p_147419_1_, int p_147419_2_, Block[] p_147419_3_)
@@ -140,6 +163,10 @@
 
     public void func_147418_b(int p_147418_1_, int p_147418_2_, Block[] p_147418_3_)
     {
+        ChunkProviderEvent.ReplaceBiomeBlocks event = new ChunkProviderEvent.ReplaceBiomeBlocks(this, p_147418_1_, p_147418_2_, p_147418_3_, null);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.getResult() == Result.DENY) return;
+
         byte b0 = 64;
         double d0 = 0.03125D;
         this.slowsandNoise = this.slowsandGravelNoiseGen.generateNoiseOctaves(this.slowsandNoise, p_147418_1_ * 16, p_147418_2_ * 16, 0, 16, 16, 1, d0, d0, 1.0D);
@@ -262,6 +289,10 @@
     // JAVADOC METHOD $$ func_73164_a
     private double[] initializeNoiseField(double[] par1ArrayOfDouble, int par2, int par3, int par4, int par5, int par6, int par7)
     {
+        ChunkProviderEvent.InitNoiseField event = new ChunkProviderEvent.InitNoiseField(this, par1ArrayOfDouble, par2, par3, par4, par5, par6, par7);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.getResult() == Result.DENY) return event.noisefield;
+
         if (par1ArrayOfDouble == null)
         {
             par1ArrayOfDouble = new double[par5 * par6 * par7];
@@ -410,6 +441,9 @@
     public void populate(IChunkProvider par1IChunkProvider, int par2, int par3)
     {
         BlockFalling.fallInstantly = true;
+
+        MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Pre(par1IChunkProvider, worldObj, hellRNG, par2, par3, false));
+
         int k = par2 * 16;
         int l = par3 * 16;
         this.genNetherBridge.generateStructuresInChunk(this.worldObj, this.hellRNG, par2, par3);
@@ -418,7 +452,8 @@
         int k1;
         int l1;
 
-        for (i1 = 0; i1 < 8; ++i1)
+        boolean doGen = TerrainGen.populate(par1IChunkProvider, worldObj, hellRNG, par2, par3, false, NETHER_LAVA);
+        for (i1 = 0; doGen && i1 < 8; ++i1)
         {
             j1 = k + this.hellRNG.nextInt(16) + 8;
             k1 = this.hellRNG.nextInt(120) + 4;
@@ -429,7 +464,8 @@
         i1 = this.hellRNG.nextInt(this.hellRNG.nextInt(10) + 1) + 1;
         int i2;
 
-        for (j1 = 0; j1 < i1; ++j1)
+        doGen = TerrainGen.populate(par1IChunkProvider, worldObj, hellRNG, par2, par3, false, FIRE);
+        for (j1 = 0; doGen && j1 < i1; ++j1)
         {
             k1 = k + this.hellRNG.nextInt(16) + 8;
             l1 = this.hellRNG.nextInt(120) + 4;
@@ -438,8 +474,9 @@
         }
 
         i1 = this.hellRNG.nextInt(this.hellRNG.nextInt(10) + 1);
-
-        for (j1 = 0; j1 < i1; ++j1)
+        
+        doGen = TerrainGen.populate(par1IChunkProvider, worldObj, hellRNG, par2, par3, false, GLOWSTONE);
+        for (j1 = 0; doGen && j1 < i1; ++j1)
         {
             k1 = k + this.hellRNG.nextInt(16) + 8;
             l1 = this.hellRNG.nextInt(120) + 4;
@@ -447,7 +484,7 @@
             (new WorldGenGlowStone1()).generate(this.worldObj, this.hellRNG, k1, l1, i2);
         }
 
-        for (j1 = 0; j1 < 10; ++j1)
+        for (j1 = 0; doGen && j1 < 10; ++j1)
         {
             k1 = k + this.hellRNG.nextInt(16) + 8;
             l1 = this.hellRNG.nextInt(128);
@@ -455,7 +492,10 @@
             (new WorldGenGlowStone2()).generate(this.worldObj, this.hellRNG, k1, l1, i2);
         }
 
-        if (this.hellRNG.nextInt(1) == 0)
+        MinecraftForge.EVENT_BUS.post(new DecorateBiomeEvent.Pre(worldObj, hellRNG, k, l));
+
+        doGen = TerrainGen.decorate(worldObj, hellRNG, k, l, SHROOM);
+        if (doGen && this.hellRNG.nextInt(1) == 0)
         {
             j1 = k + this.hellRNG.nextInt(16) + 8;
             k1 = this.hellRNG.nextInt(128);
@@ -463,7 +503,7 @@
             (new WorldGenFlowers(Blocks.brown_mushroom)).generate(this.worldObj, this.hellRNG, j1, k1, l1);
         }
 
-        if (this.hellRNG.nextInt(1) == 0)
+        if (doGen && this.hellRNG.nextInt(1) == 0)
         {
             j1 = k + this.hellRNG.nextInt(16) + 8;
             k1 = this.hellRNG.nextInt(128);
@@ -474,7 +514,8 @@
         WorldGenMinable worldgenminable = new WorldGenMinable(Blocks.quartz_ore, 13, Blocks.netherrack);
         int j2;
 
-        for (k1 = 0; k1 < 16; ++k1)
+        doGen = TerrainGen.generateOre(worldObj, hellRNG, worldgenminable, k, l, QUARTZ);
+        for (k1 = 0; doGen && k1 < 16; ++k1)
         {
             l1 = k + this.hellRNG.nextInt(16);
             i2 = this.hellRNG.nextInt(108) + 10;
@@ -490,6 +531,9 @@
             (new WorldGenHellLava(Blocks.flowing_lava, true)).generate(this.worldObj, this.hellRNG, l1, i2, j2);
         }
 
+        MinecraftForge.EVENT_BUS.post(new DecorateBiomeEvent.Post(worldObj, hellRNG, k, l));
+        MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Post(par1IChunkProvider, worldObj, hellRNG, par2, par3, false));
+
         BlockFalling.fallInstantly = false;
     }
 
