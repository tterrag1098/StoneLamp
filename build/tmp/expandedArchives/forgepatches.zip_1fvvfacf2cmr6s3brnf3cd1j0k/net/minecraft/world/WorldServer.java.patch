--- ../src-base/minecraft/net/minecraft/world/WorldServer.java
+++ ../src-work/minecraft/net/minecraft/world/WorldServer.java
@@ -2,6 +2,7 @@
 
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -49,11 +50,19 @@
 import net.minecraft.world.biome.WorldChunkManager;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 import net.minecraft.world.chunk.storage.ExtendedBlockStorage;
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraft.world.gen.feature.WorldGeneratorBonusChest;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraftforge.common.ChestGenHooks;
+import static net.minecraftforge.common.ChestGenHooks.BONUS_CHEST;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.world.WorldEvent;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -83,6 +92,10 @@
     private IntHashMap entityIdMap;
     private static final String __OBFID = "CL_00001437";
 
+    /** Stores the recently processed (lighting) chunks */
+    protected Set<ChunkCoordIntPair> doneChunks = new HashSet<ChunkCoordIntPair>();
+    public List<Teleporter> customTeleporters = new ArrayList<Teleporter>();
+
     public WorldServer(MinecraftServer p_i45284_1_, ISaveHandler p_i45284_2_, String p_i45284_3_, int p_i45284_4_, WorldSettings p_i45284_5_, Profiler p_i45284_6_)
     {
         super(p_i45284_2_, p_i45284_3_, p_i45284_5_, WorldProvider.getProviderForDimension(p_i45284_4_), p_i45284_6_);
@@ -115,8 +128,12 @@
             this.mapStorage.setData("scoreboard", scoreboardsavedata);
         }
 
-        scoreboardsavedata.func_96499_a(this.worldScoreboard);
+        if (!(this instanceof WorldServerMulti)) //Forge: We fix the global mapStorage, which causes us to share scoreboards early. So don't associate the save data with the temporary scoreboard
+        {
+            scoreboardsavedata.func_96499_a(this.worldScoreboard);
+        }
         ((ServerScoreboard)this.worldScoreboard).func_96547_a(scoreboardsavedata);
+        DimensionManager.setWorld(p_i45284_4_, this);
     }
 
     // JAVADOC METHOD $$ func_72835_b
@@ -176,6 +193,10 @@
         this.villageSiegeObj.tick();
         this.theProfiler.endStartSection("portalForcer");
         this.worldTeleporter.removeStalePortalLocations(this.getTotalWorldTime());
+        for (Teleporter tele : customTeleporters)
+        {
+            tele.removeStalePortalLocations(getTotalWorldTime());
+        }
         this.theProfiler.endSection();
         this.func_147488_Z();
     }
@@ -184,6 +205,7 @@
     public BiomeGenBase.SpawnListEntry spawnRandomCreature(EnumCreatureType par1EnumCreatureType, int par2, int par3, int par4)
     {
         List list = this.getChunkProvider().getPossibleCreatures(par1EnumCreatureType, par2, par3, par4);
+        list = ForgeEventFactory.getPotentialSpawns(this, par1EnumCreatureType, par2, par3, par4, list);
         return list != null && !list.isEmpty() ? (BiomeGenBase.SpawnListEntry)WeightedRandom.getRandomItem(this.rand, list) : null;
     }
 
@@ -225,10 +247,7 @@
 
     private void resetRainAndThunder()
     {
-        this.worldInfo.setRainTime(0);
-        this.worldInfo.setRaining(false);
-        this.worldInfo.setThunderTime(0);
-        this.worldInfo.setThundering(false);
+        provider.resetRainAndThunder();
     }
 
     public boolean areAllPlayersAsleep()
@@ -293,6 +312,14 @@
         int j = 0;
         Iterator iterator = this.activeChunkSet.iterator();
 
+        doneChunks.retainAll(activeChunkSet);
+        if (doneChunks.size() == activeChunkSet.size())
+        {
+            doneChunks.clear();
+        }
+
+        final long startTime = System.nanoTime();
+
         while (iterator.hasNext())
         {
             ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair)iterator.next();
@@ -302,14 +329,18 @@
             Chunk chunk = this.getChunkFromChunkCoords(chunkcoordintpair.chunkXPos, chunkcoordintpair.chunkZPos);
             this.func_147467_a(k, l, chunk);
             this.theProfiler.endStartSection("tickChunk");
-            chunk.func_150804_b(false);
+            //Limits and evenly distributes the lighting update time
+            if (System.nanoTime() - startTime <= 4000000 && doneChunks.add(chunkcoordintpair))
+            {
+                chunk.func_150804_b(false);
+            }
             this.theProfiler.endStartSection("thunder");
             int i1;
             int j1;
             int k1;
             int l1;
 
-            if (this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering())
+            if (provider.canDoLightning(chunk) && this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering())
             {
                 this.updateLCG = this.updateLCG * 3 + 1013904223;
                 i1 = this.updateLCG >> 2;
@@ -325,7 +356,7 @@
 
             this.theProfiler.endStartSection("iceandsnow");
 
-            if (this.rand.nextInt(16) == 0)
+            if (provider.canDoRainSnowIce(chunk) && this.rand.nextInt(16) == 0)
             {
                 this.updateLCG = this.updateLCG * 3 + 1013904223;
                 i1 = this.updateLCG >> 2;
@@ -403,6 +434,9 @@
     public void scheduleBlockUpdateWithPriority(int p_147454_1_, int p_147454_2_, int p_147454_3_, Block p_147454_4_, int p_147454_5_, int p_147454_6_)
     {
         NextTickListEntry nextticklistentry = new NextTickListEntry(p_147454_1_, p_147454_2_, p_147454_3_, p_147454_4_);
+        //Keeping here as a note for future when it may be restored.
+        //boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(nextticklistentry.xCoord >> 4, nextticklistentry.zCoord >> 4));
+        //byte b0 = isForced ? 0 : 8;
         byte b0 = 0;
 
         if (this.scheduledUpdatesAreImmediate && p_147454_4_.getMaterial() != Material.air)
@@ -463,7 +497,7 @@
     // JAVADOC METHOD $$ func_72939_s
     public void updateEntities()
     {
-        if (this.playerEntities.isEmpty())
+        if (this.playerEntities.isEmpty() && getPersistentChunks().isEmpty())
         {
             if (this.updateEntityTick++ >= 1200)
             {
@@ -525,6 +559,9 @@
             {
                 nextticklistentry = (NextTickListEntry)iterator.next();
                 iterator.remove();
+                //Keeping here as a note for future when it may be restored.
+                //boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(nextticklistentry.xCoord >> 4, nextticklistentry.zCoord >> 4));
+                //byte b0 = isForced ? 0 : 8;
                 byte b0 = 0;
 
                 if (this.checkChunksExist(nextticklistentry.xCoord - b0, nextticklistentry.yCoord - b0, nextticklistentry.zCoord - b0, nextticklistentry.xCoord + b0, nextticklistentry.yCoord + b0, nextticklistentry.zCoord + b0))
@@ -649,13 +686,26 @@
     {
         ArrayList arraylist = new ArrayList();
 
-        for (int k1 = 0; k1 < this.loadedTileEntityList.size(); ++k1)
+        for(int x = (p_147486_1_ >> 4); x <= (p_147486_4_ >> 4); x++)
         {
-            TileEntity tileentity = (TileEntity)this.loadedTileEntityList.get(k1);
-
-            if (tileentity.xCoord >= p_147486_1_ && tileentity.yCoord >= p_147486_2_ && tileentity.zCoord >= p_147486_3_ && tileentity.xCoord < p_147486_4_ && tileentity.yCoord < p_147486_5_ && tileentity.zCoord < p_147486_6_)
+            for(int z = (p_147486_3_ >> 4); z <= (p_147486_6_ >> 4); z++)
             {
-                arraylist.add(tileentity);
+                Chunk chunk = getChunkFromChunkCoords(x, z);
+                if (chunk != null)
+                {
+                    for(Object obj : chunk.chunkTileEntityMap.values())
+                    {
+                        TileEntity entity = (TileEntity)obj;
+                        if (!entity.isInvalid())
+                        {
+                            if (entity.xCoord >= p_147486_1_ && entity.yCoord >= p_147486_2_ && entity.zCoord >= p_147486_3_ &&
+                                entity.xCoord <= p_147486_4_ && entity.yCoord <= p_147486_5_ && entity.zCoord <= p_147486_6_)
+                            {
+                                arraylist.add(entity);
+                            }
+                        }
+                    }
+                }
             }
         }
 
@@ -665,6 +715,11 @@
     // JAVADOC METHOD $$ func_72962_a
     public boolean canMineBlock(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
     {
+        return super.canMineBlock(par1EntityPlayer, par2, par3, par4);
+    }
+
+    public boolean canMineBlockBody(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
+    {
         return !this.mcServer.isBlockProtected(this, par2, par3, par4, par1EntityPlayer);
     }
 
@@ -744,7 +799,7 @@
     // JAVADOC METHOD $$ func_73047_i
     protected void createBonusChest()
     {
-        WorldGeneratorBonusChest worldgeneratorbonuschest = new WorldGeneratorBonusChest(bonusChestContent, 10);
+        WorldGeneratorBonusChest worldgeneratorbonuschest = new WorldGeneratorBonusChest(ChestGenHooks.getItems(BONUS_CHEST, rand), ChestGenHooks.getCount(BONUS_CHEST, rand));
 
         for (int i = 0; i < 10; ++i)
         {
@@ -783,6 +838,7 @@
             }
 
             this.chunkProvider.saveChunks(par1, par2IProgressUpdate);
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Save(this));
         }
     }
 
@@ -801,6 +857,7 @@
         this.checkSessionLock();
         this.saveHandler.saveWorldInfoWithPlayer(this.worldInfo, this.mcServer.getConfigurationManager().getHostPlayerData());
         this.mapStorage.saveAllData();
+        this.perWorldStorage.saveAllData();
     }
 
     protected void onEntityAdded(Entity par1Entity)
@@ -1015,6 +1072,11 @@
         }
     }
 
+    public File getChunkSaveLocation()
+    {
+        return ((AnvilChunkLoader)theChunkProviderServer.currentChunkLoader).chunkSaveLocation;
+    }
+
     static class ServerBlockEventList extends ArrayList
         {
             private static final String __OBFID = "CL_00001439";
