--- ../src-base/minecraft/net/minecraft/client/renderer/Tessellator.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/Tessellator.java
@@ -7,6 +7,7 @@
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 import java.nio.ShortBuffer;
+import java.util.Arrays;
 import java.util.PriorityQueue;
 import net.minecraft.client.shader.TesselatorVertexState;
 import net.minecraft.client.util.QuadComparator;
@@ -15,14 +16,21 @@
 @SideOnly(Side.CLIENT)
 public class Tessellator
 {
+    private static int nativeBufferSize = 0x200000;
+    private static int trivertsInBuffer = (nativeBufferSize / 48) * 6;
+    public static boolean renderingWorldRenderer = false;
+    public boolean defaultTexture = false;
+    private int rawBufferSize = 0;
+    public int textureID = 0;
+
     // JAVADOC FIELD $$ field_78394_d
-    private ByteBuffer byteBuffer;
+    private static ByteBuffer byteBuffer = GLAllocation.createDirectByteBuffer(nativeBufferSize * 4);
     // JAVADOC FIELD $$ field_147568_c
-    private IntBuffer intBuffer;
+    private static IntBuffer intBuffer = byteBuffer.asIntBuffer();
     // JAVADOC FIELD $$ field_147566_d
-    private FloatBuffer floatBuffer;
+    private static FloatBuffer floatBuffer = byteBuffer.asFloatBuffer();
     // JAVADOC FIELD $$ field_147567_e
-    private ShortBuffer shortBuffer;
+    private static ShortBuffer shortBuffer = byteBuffer.asShortBuffer();
     // JAVADOC FIELD $$ field_78405_h
     private int[] rawBuffer;
     // JAVADOC FIELD $$ field_78406_i
@@ -67,14 +75,17 @@
 
     private Tessellator(int par1)
     {
-        this.bufferSize = par1;
-        this.byteBuffer = GLAllocation.createDirectByteBuffer(par1 * 4);
-        this.intBuffer = this.byteBuffer.asIntBuffer();
-        this.floatBuffer = this.byteBuffer.asFloatBuffer();
-        this.shortBuffer = this.byteBuffer.asShortBuffer();
-        this.rawBuffer = new int[par1];
     }
 
+    public Tessellator()
+    {
+    }
+
+    static
+    {
+        instance.defaultTexture = true;
+    }
+
     // JAVADOC METHOD $$ func_78381_a
     public int draw()
     {
@@ -86,12 +97,15 @@
         {
             this.isDrawing = false;
 
-            if (this.vertexCount > 0)
+            int offs = 0;
+            while (offs < vertexCount)
             {
+                int vtc = Math.min(vertexCount - offs, nativeBufferSize >> 5);
                 this.intBuffer.clear();
-                this.intBuffer.put(this.rawBuffer, 0, this.rawBufferIndex);
+                this.intBuffer.put(this.rawBuffer, offs * 8, vtc * 8);
                 this.byteBuffer.position(0);
-                this.byteBuffer.limit(this.rawBufferIndex * 4);
+                this.byteBuffer.limit(vtc * 32);
+                offs += vtc;
 
                 if (this.hasTexture)
                 {
@@ -126,7 +140,7 @@
                 this.floatBuffer.position(0);
                 GL11.glVertexPointer(3, 32, this.floatBuffer);
                 GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
-                GL11.glDrawArrays(this.drawMode, 0, this.vertexCount);
+                GL11.glDrawArrays(this.drawMode, 0, vtc);
                 GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
 
                 if (this.hasTexture)
@@ -152,6 +166,12 @@
                 }
             }
 
+            if (rawBufferSize > 0x20000 && rawBufferIndex < (rawBufferSize << 3))
+            {
+                rawBufferSize = 0x10000;
+                rawBuffer = new int[rawBufferSize];
+            }
+
             int i = this.rawBufferIndex * 4;
             this.reset();
             return i;
@@ -186,6 +206,14 @@
 
     public void setVertexState(TesselatorVertexState p_147565_1_)
     {
+        while (p_147565_1_.getRawBuffer().length > rawBufferSize && rawBufferSize > 0)
+        {
+            rawBufferSize <<= 1;
+        }
+        if (rawBufferSize > rawBuffer.length)
+        {
+            rawBuffer = new int[rawBufferSize];
+        }
         System.arraycopy(p_147565_1_.getRawBuffer(), 0, this.rawBuffer, 0, p_147565_1_.getRawBuffer().length);
         this.rawBufferIndex = p_147565_1_.getRawBufferIndex();
         this.vertexCount = p_147565_1_.getVertexCount();
@@ -330,6 +358,19 @@
     // JAVADOC METHOD $$ func_78377_a
     public void addVertex(double par1, double par3, double par5)
     {
+        if (rawBufferIndex >= rawBufferSize - 32) 
+        {
+            if (rawBufferSize == 0)
+            {
+                rawBufferSize = 0x10000;
+                rawBuffer = new int[rawBufferSize];
+            }
+            else
+            {
+                rawBufferSize *= 2;
+                rawBuffer = Arrays.copyOf(rawBuffer, rawBufferSize);
+            }
+        }
         ++this.addedVertices;
 
         if (this.hasTexture)
@@ -358,12 +399,6 @@
         this.rawBuffer[this.rawBufferIndex + 2] = Float.floatToRawIntBits((float)(par5 + this.zOffset));
         this.rawBufferIndex += 8;
         ++this.vertexCount;
-
-        if (this.vertexCount % 4 == 0 && this.rawBufferIndex >= this.bufferSize - 32)
-        {
-            this.draw();
-            this.isDrawing = true;
-        }
     }
 
     // JAVADOC METHOD $$ func_78378_d
