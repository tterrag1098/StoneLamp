--- ../src-base/minecraft/net/minecraft/client/renderer/ItemRenderer.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/ItemRenderer.java
@@ -20,6 +20,7 @@
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemCloth;
+import net.minecraft.item.ItemMap;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.IIcon;
 import net.minecraft.util.MathHelper;
@@ -28,6 +29,13 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.client.IItemRenderer;
+import net.minecraftforge.client.IItemRenderer.ItemRenderType;
+import net.minecraftforge.client.MinecraftForgeClient;
+import static net.minecraftforge.client.IItemRenderer.ItemRenderType.*;
+import static net.minecraftforge.client.IItemRenderer.ItemRendererHelper.*;
+
 @SideOnly(Side.CLIENT)
 public class ItemRenderer
 {
@@ -53,13 +61,25 @@
     // JAVADOC METHOD $$ func_78443_a
     public void renderItem(EntityLivingBase par1EntityLivingBase, ItemStack par2ItemStack, int par3)
     {
+        this.renderItem(par1EntityLivingBase, par2ItemStack, par3, EQUIPPED);
+    }
+
+    // JAVADOC METHOD $$ renderItem
+    public void renderItem(EntityLivingBase par1EntityLivingBase, ItemStack par2ItemStack, int par3, ItemRenderType type)
+    {
         GL11.glPushMatrix();
         TextureManager texturemanager = this.mc.getTextureManager();
         Item item = par2ItemStack.getItem();
         Block block = Block.getBlockFromItem(item);
 
-        if (par2ItemStack.getItemSpriteNumber() == 0 && item instanceof ItemBlock && RenderBlocks.renderItemIn3d(block.getRenderType()))
+        IItemRenderer customRenderer = MinecraftForgeClient.getItemRenderer(par2ItemStack, type);
+        if (customRenderer != null)
         {
+            texturemanager.bindTexture(texturemanager.getResourceLocation(par2ItemStack.getItemSpriteNumber()));
+            ForgeHooksClient.renderEquippedItem(type, customRenderer, renderBlocksIr, par1EntityLivingBase, par2ItemStack);
+        }
+        else if (par2ItemStack.getItemSpriteNumber() == 0 && item instanceof ItemBlock && RenderBlocks.renderItemIn3d(block.getRenderType()))
+        {
             texturemanager.bindTexture(texturemanager.getResourceLocation(0));
 
             if (par2ItemStack != null && par2ItemStack.getItem() instanceof ItemCloth)
@@ -104,7 +124,7 @@
             GL11.glTranslatef(-0.9375F, -0.0625F, 0.0F);
             renderItemIn2D(tessellator, f1, f2, f, f3, iicon.getIconWidth(), iicon.getIconHeight(), 0.0625F);
 
-            if (par2ItemStack.hasEffect() && par3 == 0)
+            if (par2ItemStack.hasEffect(par3))
             {
                 GL11.glDepthFunc(GL11.GL_EQUAL);
                 GL11.glDisable(GL11.GL_LIGHTING);
@@ -279,7 +299,7 @@
         RenderPlayer renderplayer;
         Render render;
 
-        if (itemstack != null && itemstack.getItem() == Items.filled_map)
+        if (itemstack != null && itemstack.getItem() instanceof ItemMap)
         {
             GL11.glPushMatrix();
             f13 = 0.8F;
@@ -346,12 +366,21 @@
             tessellator.addVertexWithUV((double)(128 + b0), (double)(0 - b0), 0.0D, 1.0D, 0.0D);
             tessellator.addVertexWithUV((double)(0 - b0), (double)(0 - b0), 0.0D, 0.0D, 0.0D);
             tessellator.draw();
-            MapData mapdata = Items.filled_map.getMapData(itemstack, this.mc.theWorld);
 
-            if (mapdata != null)
+            IItemRenderer custom = MinecraftForgeClient.getItemRenderer(itemstack, FIRST_PERSON_MAP);
+            MapData mapdata = ((ItemMap)itemstack.getItem()).getMapData(itemstack, this.mc.theWorld);
+
+            if (custom == null)
             {
-                this.mc.entityRenderer.getMapItemRenderer().func_148250_a(mapdata, false);
+                if (mapdata != null)
+                {
+                    this.mc.entityRenderer.getMapItemRenderer().func_148250_a(mapdata, false);
+                }
             }
+            else
+            {
+                custom.renderItem(FIRST_PERSON_MAP, itemstack, mc.thePlayer, mc.getTextureManager(), mapdata);
+            }
 
             GL11.glPopMatrix();
         }
@@ -452,17 +481,20 @@
 
             if (itemstack.getItem().requiresMultipleRenderPasses())
             {
-                this.renderItem(entityclientplayermp, itemstack, 0);
-                int j1 = itemstack.getItem().getColorFromItemStack(itemstack, 1);
-                f10 = (float)(j1 >> 16 & 255) / 255.0F;
-                f11 = (float)(j1 >> 8 & 255) / 255.0F;
-                f12 = (float)(j1 & 255) / 255.0F;
-                GL11.glColor4f(1.0F * f10, 1.0F * f11, 1.0F * f12, 1.0F);
-                this.renderItem(entityclientplayermp, itemstack, 1);
+                this.renderItem(entityclientplayermp, itemstack, 0, EQUIPPED_FIRST_PERSON);
+                for (int x = 1; x < itemstack.getItem().getRenderPasses(itemstack.getItemDamage()); x++)
+                {
+                    int j1 = itemstack.getItem().getColorFromItemStack(itemstack, x);
+                    f10 = (float)(j1 >> 16 & 255) / 255.0F;
+                    f11 = (float)(j1 >> 8 & 255) / 255.0F;
+                    f12 = (float)(j1 & 255) / 255.0F;
+                    GL11.glColor4f(1.0F * f10, 1.0F * f11, 1.0F * f12, 1.0F);
+                    this.renderItem(entityclientplayermp, itemstack, 1, EQUIPPED_FIRST_PERSON);
+                }
             }
             else
             {
-                this.renderItem(entityclientplayermp, itemstack, 0);
+                this.renderItem(entityclientplayermp, itemstack, 0, EQUIPPED_FIRST_PERSON);
             }
 
             GL11.glPopMatrix();
